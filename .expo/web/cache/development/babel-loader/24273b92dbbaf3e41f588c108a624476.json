{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { NavigationContext, NavigationRouteContext, CommonActions, useTheme, useLinkBuilder } from '@react-navigation/native';\nimport { useSafeArea } from 'react-native-safe-area-context';\nimport BottomTabItem from \"./BottomTabItem\";\nvar DEFAULT_TABBAR_HEIGHT = 50;\nvar DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\nvar useNativeDriver = Platform.OS !== 'web';\nexport default function BottomTabBar(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      activeTintColor = _ref.activeTintColor,\n      _ref$adaptive = _ref.adaptive,\n      adaptive = _ref$adaptive === void 0 ? true : _ref$adaptive,\n      allowFontScaling = _ref.allowFontScaling,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      _ref$keyboardHidesTab = _ref.keyboardHidesTabBar,\n      keyboardHidesTabBar = _ref$keyboardHidesTab === void 0 ? false : _ref$keyboardHidesTab,\n      labelPosition = _ref.labelPosition,\n      labelStyle = _ref.labelStyle,\n      safeAreaInsets = _ref.safeAreaInsets,\n      showIcon = _ref.showIcon,\n      showLabel = _ref.showLabel,\n      style = _ref.style,\n      tabStyle = _ref.tabStyle;\n\n  var _safeAreaInsets$top, _safeAreaInsets$right, _safeAreaInsets$botto, _safeAreaInsets$left;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var buildLink = useLinkBuilder();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isKeyboardShown = _React$useState2[0],\n      setIsKeyboardShown = _React$useState2[1];\n\n  var shouldShowTabBar = focusedOptions.tabBarVisible !== false && !(keyboardHidesTabBar && isKeyboardShown);\n\n  var _React$useState3 = React.useState(!shouldShowTabBar),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isTabBarHidden = _React$useState4[0],\n      setIsTabBarHidden = _React$useState4[1];\n\n  var _React$useState5 = React.useState(function () {\n    return new Animated.Value(shouldShowTabBar ? 1 : 0);\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 1),\n      visible = _React$useState6[0];\n\n  React.useEffect(function () {\n    if (shouldShowTabBar) {\n      Animated.timing(visible, {\n        toValue: 1,\n        duration: 250,\n        useNativeDriver: useNativeDriver\n      }).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n      Animated.timing(visible, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: useNativeDriver\n      }).start();\n    }\n  }, [shouldShowTabBar, visible]);\n\n  var _React$useState7 = React.useState(function () {\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    return {\n      height: height,\n      width: width\n    };\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      dimensions = _React$useState8[0],\n      setDimensions = _React$useState8[1];\n\n  React.useEffect(function () {\n    var handleOrientationChange = function handleOrientationChange(_ref3) {\n      var window = _ref3.window;\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', handleOrientationChange);\n\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setIsKeyboardShown(true);\n    };\n\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return setIsKeyboardShown(false);\n    };\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return function () {\n      Dimensions.removeEventListener('change', handleOrientationChange);\n\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n\n  var _React$useState9 = React.useState({\n    height: 0,\n    width: dimensions.width\n  }),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      layout = _React$useState10[0],\n      setLayout = _React$useState10[1];\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height: height,\n          width: width\n        };\n      }\n    });\n  };\n\n  var routes = state.routes;\n\n  var shouldUseHorizontalLabels = function shouldUseHorizontalLabels() {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n      var flattenedStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      var isLandscape = dimensions.width > dimensions.height;\n      return isLandscape;\n    }\n  };\n\n  var defaultInsets = useSafeArea();\n  var insets = {\n    top: (_safeAreaInsets$top = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top) !== null && _safeAreaInsets$top !== void 0 ? _safeAreaInsets$top : defaultInsets.top,\n    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : defaultInsets.right,\n    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : defaultInsets.bottom,\n    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : defaultInsets.left\n  };\n  return React.createElement(Animated.View, {\n    style: [styles.tabBar, {\n      backgroundColor: colors.card,\n      borderTopColor: colors.border\n    }, {\n      transform: [{\n        translateY: visible.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height + insets.bottom, 0]\n        })\n      }],\n      position: isTabBarHidden ? 'absolute' : null\n    }, {\n      height: DEFAULT_TABBAR_HEIGHT + insets.bottom,\n      paddingBottom: insets.bottom,\n      paddingHorizontal: Math.max(insets.left, insets.right)\n    }, style],\n    pointerEvents: isTabBarHidden ? 'none' : 'auto'\n  }, React.createElement(View, {\n    style: styles.content,\n    onLayout: handleLayout\n  }, routes.map(function (route, index) {\n    var focused = index === state.index;\n    var options = descriptors[route.key].options;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.navigate(route.name)), {}, {\n          target: state.key\n        }));\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' ? \"\".concat(label, \", tab, \").concat(index + 1, \" of \").concat(routes.length) : undefined;\n    return React.createElement(NavigationContext.Provider, {\n      key: route.key,\n      value: descriptors[route.key].navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: route\n    }, React.createElement(BottomTabItem, {\n      route: route,\n      focused: focused,\n      horizontal: shouldUseHorizontalLabels(),\n      onPress: onPress,\n      onLongPress: onLongPress,\n      accessibilityLabel: accessibilityLabel,\n      to: buildLink(route.name, route.params),\n      testID: options.tabBarTestID,\n      allowFontScaling: allowFontScaling,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      button: options.tabBarButton,\n      icon: options.tabBarIcon,\n      label: label,\n      showIcon: showIcon,\n      showLabel: showLabel,\n      labelStyle: labelStyle,\n      style: tabStyle\n    })));\n  })));\n}\nvar styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["BottomTabBar.tsx"],"names":["DEFAULT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","Platform","adaptive","keyboardHidesTabBar","tabStyle","colors","useTheme","buildLink","useLinkBuilder","focusedRoute","state","focusedDescriptor","descriptors","focusedOptions","React","shouldShowTabBar","Animated","toValue","duration","finished","setIsTabBarHidden","height","width","Dimensions","handleOrientationChange","window","setDimensions","handleKeyboardShow","setIsKeyboardShown","handleKeyboardHide","Keyboard","dimensions","handleLayout","e","setLayout","layout","routes","shouldUseHorizontalLabels","labelPosition","maxTabItemWidth","flattenedStyle","StyleSheet","isLandscape","defaultInsets","useSafeArea","insets","top","safeAreaInsets","right","bottom","left","styles","backgroundColor","borderTopColor","border","transform","translateY","inputRange","outputRange","position","isTabBarHidden","paddingBottom","paddingHorizontal","Math","focused","index","options","route","onPress","event","type","target","canPreventDefault","navigation","CommonActions","key","onLongPress","label","accessibilityLabel","tabBar","borderTopWidth","elevation","content","flex","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Keyboard,\n  Platform,\n  LayoutChangeEvent,\n  ScaledSize,\n  Dimensions,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  CommonActions,\n  useTheme,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport { useSafeArea } from 'react-native-safe-area-context';\n\nimport BottomTabItem from './BottomTabItem';\nimport { BottomTabBarProps } from '../types';\n\ntype Props = BottomTabBarProps & {\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 50;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive = true,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  safeAreaInsets,\n  showIcon,\n  showLabel,\n  style,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  const shouldShowTabBar =\n    focusedOptions.tabBarVisible !== false &&\n    !(keyboardHidesTabBar && isKeyboardShown);\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    if (shouldShowTabBar) {\n      Animated.timing(visible, {\n        toValue: 1,\n        duration: 250,\n        useNativeDriver,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      Animated.timing(visible, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver,\n      }).start();\n    }\n  }, [shouldShowTabBar, visible]);\n\n  const [dimensions, setDimensions] = React.useState(() => {\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', handleOrientationChange);\n\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      Dimensions.removeEventListener('change', handleOrientationChange);\n\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n  const shouldUseHorizontalLabels = () => {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      // Screen size matches a tablet\n      let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n      const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      const isLandscape = dimensions.width > dimensions.height;\n\n      return isLandscape;\n    }\n  };\n\n  const defaultInsets = useSafeArea();\n\n  const insets = {\n    top: safeAreaInsets?.top ?? defaultInsets.top,\n    right: safeAreaInsets?.right ?? defaultInsets.right,\n    bottom: safeAreaInsets?.bottom ?? defaultInsets.bottom,\n    left: safeAreaInsets?.left ?? defaultInsets.left,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor: colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [layout.height + insets.bottom, 0],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : null,\n        },\n        {\n          height: DEFAULT_TABBAR_HEIGHT + insets.bottom,\n          paddingBottom: insets.bottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        style,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n    >\n      <View style={styles.content} onLayout={handleLayout}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate(route.name),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={shouldUseHorizontalLabels()}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={allowFontScaling}\n                  activeTintColor={activeTintColor}\n                  inactiveTintColor={inactiveTintColor}\n                  activeBackgroundColor={activeBackgroundColor}\n                  inactiveBackgroundColor={inactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={options.tabBarIcon}\n                  label={label}\n                  showIcon={showIcon}\n                  showLabel={showLabel}\n                  labelStyle={labelStyle}\n                  style={tabStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}