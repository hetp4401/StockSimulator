{"ast":null,"code":"'use strict';\n\nvar _readOnlyError = require(\"@babel/runtime/helpers/readOnlyError\");\n\nexports.Writable = Writable;\nWritable.WritableState = WritableState;\n\nvar util = require(\"./util\");\n\nvar Stream = require(\"./stream\");\n\nvar Buffer = require(\"./buffer\").Buffer;\n\nvar nextTick = require(\"./nextTick\").nextTick;\n\nif (typeof Stream.Stream === 'function') {\n  Stream = (_readOnlyError(\"Stream\"), Stream.Stream);\n}\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction WritableState(options, stream) {\n  options = options || {};\n  this.objectMode = !!options.objectMode;\n  if (stream instanceof Stream.Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n  this.highWaterMark = ~~this.highWaterMark;\n  this.needDrain = false;\n  this.ending = false;\n  this.ended = false;\n  this.finished = false;\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n  this.length = 0;\n  this.writing = false;\n  this.corked = 0;\n  this.sync = true;\n  this.bufferProcessing = false;\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  this.writecb = null;\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n  this.pendingcb = 0;\n  this.prefinished = false;\n  this.errorEmitted = false;\n  this.bufferedRequestCount = 0;\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\nObject.defineProperty(WritableState.prototype, 'buffer', {\n  get: function get() {\n    return this.getBuffer();\n  }\n});\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && (typeof Symbol === \"function\" ? Symbol.hasInstance : \"@@hasInstance\")) {\n  realHasInstance = Function.prototype[typeof Symbol === \"function\" ? Symbol.hasInstance : \"@@hasInstance\"];\n  Object.defineProperty(Writable, typeof Symbol === \"function\" ? Symbol.hasInstance : \"@@hasInstance\", {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Stream.Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  stream.emit('error', er);\n  nextTick(cb, er);\n}\n\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (!(chunk instanceof Buffer) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  if (er) {\n    stream.emit('error', er);\n    nextTick(cb, er);\n    valid = false;\n  }\n\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk instanceof Buffer) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (chunk instanceof Buffer) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark;\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) nextTick(cb, er);else cb(er);\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/adarsh/Documents/StocksUI/node_modules/react-native-stream/src/_stream_writable.js"],"names":["exports","Writable","WritableState","util","require","Stream","Buffer","nextTick","inherits","nop","WriteReq","chunk","encoding","cb","callback","next","options","stream","objectMode","Duplex","writableObjectMode","hwm","highWaterMark","defaultHwm","needDrain","ending","ended","finished","noDecode","decodeStrings","defaultEncoding","length","writing","corked","sync","bufferProcessing","onwrite","er","writecb","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","errorEmitted","bufferedRequestCount","corkedRequestsFree","CorkedRequest","prototype","getBuffer","current","out","push","Object","defineProperty","get","realHasInstance","Symbol","hasInstance","Function","value","object","call","_writableState","writable","write","_write","writev","_writev","pipe","emit","Error","writeAfterEnd","validChunk","state","valid","TypeError","undefined","ret","writeOrBuffer","cork","uncork","clearBuffer","setDefaultEncoding","toLowerCase","isEncoding","decodeChunk","from","len","last","doWrite","onwriteError","onwriteStateUpdate","needFinish","afterWrite","onwriteDrain","finishMaybe","entry","l","buffer","Array","holder","count","finish","end","endWritable","prefinish","need","once","err"],"mappings":"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","sourcesContent":["// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nexports.Writable = Writable;\nWritable.WritableState = WritableState;\n\nconst util = require('./util');\nconst Stream = require('./stream');\nconst Buffer = require('./buffer').Buffer;\nconst nextTick = require('./nextTick').nextTick;\n\n// This is totally hacky. TODO: fixme.\nif (typeof Stream.Stream === 'function') {\n  Stream = Stream.Stream;\n}\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction WritableState(options, stream) {\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Stream.Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\nObject.defineProperty(WritableState.prototype, 'buffer', {\n  get: function() {\n    return this.getBuffer();\n  }\n});\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance) {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function(object) {\n      if (realHasInstance.call(this, object))\n        return true;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!(realHasInstance.call(Writable, this)) &&\n      !(this instanceof Stream.Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function')\n      this._write = options.write;\n\n    if (typeof options.writev === 'function')\n      this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  nextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n  // Always throw error if a null is written\n  // if we are not in object mode then throw\n  // if it is not a buffer, string, or undefined.\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (!(chunk instanceof Buffer) &&\n      typeof chunk !== 'string' &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk instanceof Buffer)\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function')\n    cb = nop;\n\n  if (state.ended)\n    writeAfterEnd(this, cb);\n  else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function() {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function() {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing &&\n        !state.corked &&\n        !state.finished &&\n        !state.bufferProcessing &&\n        state.bufferedRequest)\n      clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string')\n    encoding = encoding.toLowerCase();\n  if (!Buffer.isEncoding(encoding))\n    throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (chunk instanceof Buffer)\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev)\n    stream._writev(chunk, state.onwrite);\n  else\n    stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync)\n    nextTick(cb, er);\n  else\n    cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished &&\n        !state.corked &&\n        !state.bufferProcessing &&\n        state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null)\n      state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined)\n    this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(state) {\n  return (state.ending &&\n          state.length === 0 &&\n          state.bufferedRequest === null &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  this.next = null;\n  this.entry = null;\n\n  this.finish = (err) => {\n    var entry = this.entry;\n    this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = this;\n    } else {\n      state.corkedRequestsFree = this;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}