{"ast":null,"code":"'use strict';\n\nexports.Stream = Stream;\nmodule.exports = Stream;\n\nvar EE = require(\"./events\").EventEmitter;\n\nvar util = require(\"./util\");\n\nutil.inherits(Stream, EE);\nStream.Readable = require(\"./_stream_readable\").Readable;\nStream.Writable = require(\"./_stream_writable\").Writable;\nStream.Duplex = require(\"./_stream_duplex\").Duplex;\nStream.Transform = require(\"./_stream_transform\").Transform;\nStream.PassThrough = require(\"./_stream_passthrough\").PassThrough;\nStream.Stream = Stream;\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function (dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n    dest.end();\n  }\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  function onerror(er) {\n    cleanup();\n\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er;\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n  dest.on('close', cleanup);\n  dest.emit('pipe', source);\n  return dest;\n};","map":{"version":3,"sources":["/Users/adarsh/Documents/StocksUI/node_modules/react-native-stream/src/stream.js"],"names":["exports","Stream","module","EE","require","EventEmitter","util","inherits","Readable","Writable","Duplex","Transform","PassThrough","call","prototype","pipe","dest","options","source","ondata","chunk","writable","write","pause","on","ondrain","readable","resume","_isStdio","end","onend","onclose","didOnEnd","destroy","onerror","er","cleanup","listenerCount","removeListener","emit"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.Stream = Stream;\nmodule.exports = Stream;\n\nconst EE = require('./events').EventEmitter;\nconst util = require('./util');\n\nutil.inherits(Stream, EE);\nStream.Readable = require('./_stream_readable').Readable;\nStream.Writable = require('./_stream_writable').Writable;\nStream.Duplex = require('./_stream_duplex').Duplex;\nStream.Transform = require('./_stream_transform').Transform;\nStream.PassThrough = require('./_stream_passthrough').PassThrough;\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n"]},"metadata":{},"sourceType":"script"}