{"ast":null,"code":"'use strict';\n\nvar _readOnlyError = require(\"@babel/runtime/helpers/readOnlyError\");\n\nexports.Readable = Readable;\nReadable.ReadableState = ReadableState;\n\nvar EE = require(\"./events\").EventEmitter;\n\nvar Stream = require(\"./stream\");\n\nvar Buffer = require(\"./buffer\").Buffer;\n\nvar util = require(\"./util\");\n\nvar nextTick = require(\"./nextTick\").nextTick;\n\nvar StringDecoder;\n\nif (typeof Stream.Stream === 'function') {\n  Stream = (_readOnlyError(\"Stream\"), Stream.Stream);\n}\n\nutil.inherits(Readable, Stream);\n\nfunction prependListener(emitter, event, fn) {\n  if (typeof emitter.prependListener === 'function') {\n    return emitter.prependListener(event, fn);\n  } else {\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n  }\n}\n\nfunction ReadableState(options, stream) {\n  options = options || {};\n  this.objectMode = !!options.objectMode;\n  if (stream instanceof Stream.Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n  this.highWaterMark = ~~this.highWaterMark;\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n  this.sync = true;\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n  this.ranOut = false;\n  this.awaitDrain = 0;\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require(\"./string_decoder\").StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this);\n  this.readable = true;\n  if (options && typeof options.read === 'function') this._read = options.read;\n  Stream.call(this);\n}\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n\n    if (encoding !== state.encoding) {\n      chunk = Buffer.from(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var _e = new Error('stream.unshift() after end event');\n\n      stream.emit('error', _e);\n    } else {\n      var skipAdd;\n\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      if (!skipAdd) {\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require(\"./string_decoder\").StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\nvar MAX_HWM = 0x800000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    if (state.flowing && state.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n}\n\nReadable.prototype.read = function (n) {\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false;\n\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  var doRead = state.needReadable;\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n  }\n\n  if (state.ended || state.reading) {\n    doRead = false;\n  } else if (doRead) {\n    state.reading = true;\n    state.sync = true;\n    if (state.length === 0) state.needReadable = true;\n\n    this._read(state.highWaterMark);\n\n    state.sync = false;\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    if (!state.ended) state.needReadable = true;\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n\n  if (!(chunk instanceof Buffer) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n  emitReadable(stream);\n}\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    state.emittedReadable = true;\n    if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  stream.emit('readable');\n  flow(stream);\n}\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    stream.read(0);\n    if (len === state.length) break;else len = state.length;\n  }\n\n  state.readingMore = false;\n}\n\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  var doEnd = !pipeOpts || pipeOpts.end !== false;\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable) {\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    dest.end();\n  }\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n    cleanedUp = true;\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n\n    if (false === ret && !increasedAwaitDrain) {\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && state.pipes.indexOf(dest) !== -1) && !cleanedUp) {\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n\n      src.pause();\n    }\n  }\n\n  function onerror(er) {\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  prependListener(dest, 'error', onerror);\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    src.unpipe(dest);\n  }\n\n  dest.emit('pipe', src);\n\n  if (!state.flowing) {\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  if (state.pipesCount === 0) return this;\n\n  if (state.pipesCount === 1) {\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  if (!dest) {\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this);\n    }\n\n    return this;\n  }\n\n  var index = state.pipes.indexOf(dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this);\n  return this;\n};\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n\n      if (!state.reading) {\n        nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  self.read(0);\n}\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    state.flowing = true;\n    resume(this, state);\n  }\n\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  if (false !== this._readableState.flowing) {\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n}\n\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n  var self = this;\n  stream.on('end', function () {\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n  stream.on('data', function (chunk) {\n    if (state.decoder) chunk = state.decoder.write(chunk);\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = self.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  events.forEach(function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  self._read = function (n) {\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\nReadable._fromList = fromList;\n\nfunction fromList(n, state) {\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer[0];else ret = state.buffer.concat(state.length);\n    state.buffer.length = 0;\n  } else {\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n  return ret;\n}\n\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n\n  if (n < list.head.data.length) {\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    ret = list.shift();\n  } else {\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n\n  return ret;\n}\n\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n\n      break;\n    }\n\n    ++c;\n  }\n\n  list.length -= c;\n  return ret;\n}\n\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n\n      break;\n    }\n\n    ++c;\n  }\n\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}","map":{"version":3,"sources":["/Users/adarsh/Documents/StocksUI/node_modules/react-native-stream/src/_stream_readable.js"],"names":["exports","Readable","ReadableState","EE","require","EventEmitter","Stream","Buffer","util","nextTick","StringDecoder","inherits","prependListener","emitter","event","fn","_events","on","Array","isArray","unshift","options","stream","objectMode","Duplex","readableObjectMode","hwm","highWaterMark","defaultHwm","buffer","length","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","encoding","_readableState","readable","read","_read","call","prototype","push","chunk","state","from","readableAddChunk","isPaused","addToFront","er","chunkInvalid","emit","onEofChunk","e","Error","skipAdd","write","emitReadable","maybeReadMore","needMoreData","setEncoding","enc","MAX_HWM","computeNewHighWaterMark","n","howMuchToRead","parseInt","nOrig","endReadable","doRead","ret","fromList","undefined","TypeError","end","emitReadable_","flow","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","endFn","onend","cleanup","once","onunpipe","ondrain","pipeOnDrain","cleanedUp","removeListener","onclose","onfinish","onerror","ondata","_writableState","needDrain","increasedAwaitDrain","indexOf","pause","unpipe","listenerCount","resume","dests","i","index","splice","ev","res","nReadingNextTick","addListener","self","resume_","wrap","paused","method","apply","arguments","events","forEach","bind","_fromList","shift","join","concat","fromListPartial","list","hasStrings","head","data","slice","copyFromBufferString","copyFromBuffer","p","c","next","str","nb","tail","allocUnsafe","copy","buf","endReadableNT"],"mappings":"AAAA;;;;AAEAA,OAAO,CAACC,QAAR,GAAmBA,QAAnB;AACAA,QAAQ,CAACC,aAAT,GAAyBA,aAAzB;;AAEA,IAAMC,EAAE,GAAGC,OAAO,YAAP,CAAoBC,YAA/B;;AACA,IAAMC,MAAM,GAAGF,OAAO,YAAtB;;AACA,IAAMG,MAAM,GAAGH,OAAO,YAAP,CAAoBG,MAAnC;;AACA,IAAMC,IAAI,GAAGJ,OAAO,UAApB;;AACA,IAAMK,QAAQ,GAAGL,OAAO,cAAP,CAAsBK,QAAvC;;AACA,IAAIC,aAAJ;;AAGA,IAAI,OAAOJ,MAAM,CAACA,MAAd,KAAyB,UAA7B,EAAyC;AACvCA,EAAAA,MAAM,8BAAGA,MAAM,CAACA,MAAV,CAAN;AACD;;AACDE,IAAI,CAACG,QAAL,CAAcV,QAAd,EAAwBK,MAAxB;;AAEA,SAASM,eAAT,CAAyBC,OAAzB,EAAkCC,KAAlC,EAAyCC,EAAzC,EAA6C;AAG3C,MAAI,OAAOF,OAAO,CAACD,eAAf,KAAmC,UAAvC,EAAmD;AACjD,WAAOC,OAAO,CAACD,eAAR,CAAwBE,KAAxB,EAA+BC,EAA/B,CAAP;AACD,GAFD,MAEO;AAKL,QAAI,CAACF,OAAO,CAACG,OAAT,IAAoB,CAACH,OAAO,CAACG,OAAR,CAAgBF,KAAhB,CAAzB,EACED,OAAO,CAACI,EAAR,CAAWH,KAAX,EAAkBC,EAAlB,EADF,KAEK,IAAIG,KAAK,CAACC,OAAN,CAAcN,OAAO,CAACG,OAAR,CAAgBF,KAAhB,CAAd,CAAJ,EACHD,OAAO,CAACG,OAAR,CAAgBF,KAAhB,EAAuBM,OAAvB,CAA+BL,EAA/B,EADG,KAGHF,OAAO,CAACG,OAAR,CAAgBF,KAAhB,IAAyB,CAACC,EAAD,EAAKF,OAAO,CAACG,OAAR,CAAgBF,KAAhB,CAAL,CAAzB;AACH;AACF;;AAED,SAASZ,aAAT,CAAuBmB,OAAvB,EAAgCC,MAAhC,EAAwC;AACtCD,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAIA,OAAKE,UAAL,GAAkB,CAAC,CAACF,OAAO,CAACE,UAA5B;AAEA,MAAID,MAAM,YAAYhB,MAAM,CAACkB,MAA7B,EACE,KAAKD,UAAL,GAAkB,KAAKA,UAAL,IAAmB,CAAC,CAACF,OAAO,CAACI,kBAA/C;AAIF,MAAIC,GAAG,GAAGL,OAAO,CAACM,aAAlB;AACA,MAAIC,UAAU,GAAG,KAAKL,UAAL,GAAkB,EAAlB,GAAuB,KAAK,IAA7C;AACA,OAAKI,aAAL,GAAsBD,GAAG,IAAIA,GAAG,KAAK,CAAhB,GAAqBA,GAArB,GAA2BE,UAAhD;AAGA,OAAKD,aAAL,GAAqB,CAAC,CAAC,KAAKA,aAA5B;AAKA,OAAKE,MAAL,GAAc,EAAd;AACA,OAAKC,MAAL,GAAc,CAAd;AACA,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,UAAL,GAAkB,CAAlB;AACA,OAAKC,OAAL,GAAe,IAAf;AACA,OAAKC,KAAL,GAAa,KAAb;AACA,OAAKC,UAAL,GAAkB,KAAlB;AACA,OAAKC,OAAL,GAAe,KAAf;AAMA,OAAKC,IAAL,GAAY,IAAZ;AAIA,OAAKC,YAAL,GAAoB,KAApB;AACA,OAAKC,eAAL,GAAuB,KAAvB;AACA,OAAKC,iBAAL,GAAyB,KAAzB;AACA,OAAKC,eAAL,GAAuB,KAAvB;AAKA,OAAKC,eAAL,GAAuBrB,OAAO,CAACqB,eAAR,IAA2B,MAAlD;AAIA,OAAKC,MAAL,GAAc,KAAd;AAGA,OAAKC,UAAL,GAAkB,CAAlB;AAGA,OAAKC,WAAL,GAAmB,KAAnB;AAEA,OAAKC,OAAL,GAAe,IAAf;AACA,OAAKC,QAAL,GAAgB,IAAhB;;AACA,MAAI1B,OAAO,CAAC0B,QAAZ,EAAsB;AACpB,QAAI,CAACrC,aAAL,EACEA,aAAa,GAAGN,OAAO,oBAAP,CAA4BM,aAA5C;AACF,SAAKoC,OAAL,GAAe,IAAIpC,aAAJ,CAAkBW,OAAO,CAAC0B,QAA1B,CAAf;AACA,SAAKA,QAAL,GAAgB1B,OAAO,CAAC0B,QAAxB;AACD;AACF;;AAED,SAAS9C,QAAT,CAAkBoB,OAAlB,EAA2B;AACzB,MAAI,EAAE,gBAAgBpB,QAAlB,CAAJ,EACE,OAAO,IAAIA,QAAJ,CAAaoB,OAAb,CAAP;AAEF,OAAK2B,cAAL,GAAsB,IAAI9C,aAAJ,CAAkBmB,OAAlB,EAA2B,IAA3B,CAAtB;AAGA,OAAK4B,QAAL,GAAgB,IAAhB;AAEA,MAAI5B,OAAO,IAAI,OAAOA,OAAO,CAAC6B,IAAf,KAAwB,UAAvC,EACE,KAAKC,KAAL,GAAa9B,OAAO,CAAC6B,IAArB;AAEF5C,EAAAA,MAAM,CAAC8C,IAAP,CAAY,IAAZ;AACD;;AAMDnD,QAAQ,CAACoD,SAAT,CAAmBC,IAAnB,GAA0B,UAASC,KAAT,EAAgBR,QAAhB,EAA0B;AAClD,MAAIS,KAAK,GAAG,KAAKR,cAAjB;;AAEA,MAAI,CAACQ,KAAK,CAACjC,UAAP,IAAqB,OAAOgC,KAAP,KAAiB,QAA1C,EAAoD;AAClDR,IAAAA,QAAQ,GAAGA,QAAQ,IAAIS,KAAK,CAACd,eAA7B;;AACA,QAAIK,QAAQ,KAAKS,KAAK,CAACT,QAAvB,EAAiC;AAC/BQ,MAAAA,KAAK,GAAGhD,MAAM,CAACkD,IAAP,CAAYF,KAAZ,EAAmBR,QAAnB,CAAR;AACAA,MAAAA,QAAQ,GAAG,EAAX;AACD;AACF;;AAED,SAAOW,gBAAgB,CAAC,IAAD,EAAOF,KAAP,EAAcD,KAAd,EAAqBR,QAArB,EAA+B,KAA/B,CAAvB;AACD,CAZD;;AAeA9C,QAAQ,CAACoD,SAAT,CAAmBjC,OAAnB,GAA6B,UAASmC,KAAT,EAAgB;AAC3C,MAAIC,KAAK,GAAG,KAAKR,cAAjB;AACA,SAAOU,gBAAgB,CAAC,IAAD,EAAOF,KAAP,EAAcD,KAAd,EAAqB,EAArB,EAAyB,IAAzB,CAAvB;AACD,CAHD;;AAKAtD,QAAQ,CAACoD,SAAT,CAAmBM,QAAnB,GAA8B,YAAW;AACvC,SAAO,KAAKX,cAAL,CAAoBf,OAApB,KAAgC,KAAvC;AACD,CAFD;;AAIA,SAASyB,gBAAT,CAA0BpC,MAA1B,EAAkCkC,KAAlC,EAAyCD,KAAzC,EAAgDR,QAAhD,EAA0Da,UAA1D,EAAsE;AACpE,MAAIC,EAAE,GAAGC,YAAY,CAACN,KAAD,EAAQD,KAAR,CAArB;;AACA,MAAIM,EAAJ,EAAQ;AACNvC,IAAAA,MAAM,CAACyC,IAAP,CAAY,OAAZ,EAAqBF,EAArB;AACD,GAFD,MAEO,IAAIN,KAAK,KAAK,IAAd,EAAoB;AACzBC,IAAAA,KAAK,CAACpB,OAAN,GAAgB,KAAhB;AACA4B,IAAAA,UAAU,CAAC1C,MAAD,EAASkC,KAAT,CAAV;AACD,GAHM,MAGA,IAAIA,KAAK,CAACjC,UAAN,IAAoBgC,KAAK,IAAIA,KAAK,CAACzB,MAAN,GAAe,CAAhD,EAAmD;AACxD,QAAI0B,KAAK,CAACtB,KAAN,IAAe,CAAC0B,UAApB,EAAgC;AAC9B,UAAMK,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAV,CAAV;AACA5C,MAAAA,MAAM,CAACyC,IAAP,CAAY,OAAZ,EAAqBE,CAArB;AACD,KAHD,MAGO,IAAIT,KAAK,CAACrB,UAAN,IAAoByB,UAAxB,EAAoC;AACzC,UAAMK,EAAC,GAAG,IAAIC,KAAJ,CAAU,kCAAV,CAAV;;AACA5C,MAAAA,MAAM,CAACyC,IAAP,CAAY,OAAZ,EAAqBE,EAArB;AACD,KAHM,MAGA;AACL,UAAIE,OAAJ;;AACA,UAAIX,KAAK,CAACV,OAAN,IAAiB,CAACc,UAAlB,IAAgC,CAACb,QAArC,EAA+C;AAC7CQ,QAAAA,KAAK,GAAGC,KAAK,CAACV,OAAN,CAAcsB,KAAd,CAAoBb,KAApB,CAAR;AACAY,QAAAA,OAAO,GAAI,CAACX,KAAK,CAACjC,UAAP,IAAqBgC,KAAK,CAACzB,MAAN,KAAiB,CAAjD;AACD;;AAED,UAAI,CAAC8B,UAAL,EACEJ,KAAK,CAACpB,OAAN,GAAgB,KAAhB;;AAIF,UAAI,CAAC+B,OAAL,EAAc;AAEZ,YAAIX,KAAK,CAACvB,OAAN,IAAiBuB,KAAK,CAAC1B,MAAN,KAAiB,CAAlC,IAAuC,CAAC0B,KAAK,CAACnB,IAAlD,EAAwD;AACtDf,UAAAA,MAAM,CAACyC,IAAP,CAAY,MAAZ,EAAoBR,KAApB;AACAjC,UAAAA,MAAM,CAAC4B,IAAP,CAAY,CAAZ;AACD,SAHD,MAGO;AAELM,UAAAA,KAAK,CAAC1B,MAAN,IAAgB0B,KAAK,CAACjC,UAAN,GAAmB,CAAnB,GAAuBgC,KAAK,CAACzB,MAA7C;AACA,cAAI8B,UAAJ,EACEJ,KAAK,CAAC3B,MAAN,CAAaT,OAAb,CAAqBmC,KAArB,EADF,KAGEC,KAAK,CAAC3B,MAAN,CAAayB,IAAb,CAAkBC,KAAlB;AAEF,cAAIC,KAAK,CAAClB,YAAV,EACE+B,YAAY,CAAC/C,MAAD,CAAZ;AACH;AACF;;AAEDgD,MAAAA,aAAa,CAAChD,MAAD,EAASkC,KAAT,CAAb;AACD;AACF,GAvCM,MAuCA,IAAI,CAACI,UAAL,EAAiB;AACtBJ,IAAAA,KAAK,CAACpB,OAAN,GAAgB,KAAhB;AACD;;AAED,SAAOmC,YAAY,CAACf,KAAD,CAAnB;AACD;;AAUD,SAASe,YAAT,CAAsBf,KAAtB,EAA6B;AAC3B,SAAO,CAACA,KAAK,CAACtB,KAAP,KACCsB,KAAK,CAAClB,YAAN,IACAkB,KAAK,CAAC1B,MAAN,GAAe0B,KAAK,CAAC7B,aADrB,IAEA6B,KAAK,CAAC1B,MAAN,KAAiB,CAHlB,CAAP;AAID;;AAGD7B,QAAQ,CAACoD,SAAT,CAAmBmB,WAAnB,GAAiC,UAASC,GAAT,EAAc;AAC7C,MAAI,CAAC/D,aAAL,EACEA,aAAa,GAAGN,OAAO,oBAAP,CAA4BM,aAA5C;AACF,OAAKsC,cAAL,CAAoBF,OAApB,GAA8B,IAAIpC,aAAJ,CAAkB+D,GAAlB,CAA9B;AACA,OAAKzB,cAAL,CAAoBD,QAApB,GAA+B0B,GAA/B;AACA,SAAO,IAAP;AACD,CAND;;AASA,IAAMC,OAAO,GAAG,QAAhB;;AACA,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAClC,MAAIA,CAAC,IAAIF,OAAT,EAAkB;AAChBE,IAAAA,CAAC,GAAGF,OAAJ;AACD,GAFD,MAEO;AAGLE,IAAAA,CAAC;AACDA,IAAAA,CAAC,IAAIA,CAAC,KAAK,CAAX;AACAA,IAAAA,CAAC,IAAIA,CAAC,KAAK,CAAX;AACAA,IAAAA,CAAC,IAAIA,CAAC,KAAK,CAAX;AACAA,IAAAA,CAAC,IAAIA,CAAC,KAAK,CAAX;AACAA,IAAAA,CAAC,IAAIA,CAAC,KAAK,EAAX;AACAA,IAAAA,CAAC;AACF;;AACD,SAAOA,CAAP;AACD;;AAID,SAASC,aAAT,CAAuBD,CAAvB,EAA0BpB,KAA1B,EAAiC;AAC/B,MAAIoB,CAAC,IAAI,CAAL,IAAWpB,KAAK,CAAC1B,MAAN,KAAiB,CAAjB,IAAsB0B,KAAK,CAACtB,KAA3C,EACE,OAAO,CAAP;AACF,MAAIsB,KAAK,CAACjC,UAAV,EACE,OAAO,CAAP;;AACF,MAAIqD,CAAC,KAAKA,CAAV,EAAa;AAEX,QAAIpB,KAAK,CAACvB,OAAN,IAAiBuB,KAAK,CAAC1B,MAA3B,EACE,OAAO0B,KAAK,CAAC3B,MAAN,CAAa,CAAb,EAAgBC,MAAvB,CADF,KAGE,OAAO0B,KAAK,CAAC1B,MAAb;AACH;;AAED,MAAI8C,CAAC,GAAGpB,KAAK,CAAC7B,aAAd,EACE6B,KAAK,CAAC7B,aAAN,GAAsBgD,uBAAuB,CAACC,CAAD,CAA7C;AACF,MAAIA,CAAC,IAAIpB,KAAK,CAAC1B,MAAf,EACE,OAAO8C,CAAP;;AAEF,MAAI,CAACpB,KAAK,CAACtB,KAAX,EAAkB;AAChBsB,IAAAA,KAAK,CAAClB,YAAN,GAAqB,IAArB;AACA,WAAO,CAAP;AACD;;AACD,SAAOkB,KAAK,CAAC1B,MAAb;AACD;;AAGD7B,QAAQ,CAACoD,SAAT,CAAmBH,IAAnB,GAA0B,UAAS0B,CAAT,EAAY;AACpCA,EAAAA,CAAC,GAAGE,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAAZ;AACA,MAAIpB,KAAK,GAAG,KAAKR,cAAjB;AACA,MAAI+B,KAAK,GAAGH,CAAZ;AAEA,MAAIA,CAAC,KAAK,CAAV,EACEpB,KAAK,CAACjB,eAAN,GAAwB,KAAxB;;AAKF,MAAIqC,CAAC,KAAK,CAAN,IACApB,KAAK,CAAClB,YADN,KAECkB,KAAK,CAAC1B,MAAN,IAAgB0B,KAAK,CAAC7B,aAAtB,IAAuC6B,KAAK,CAACtB,KAF9C,CAAJ,EAE0D;AACxD,QAAIsB,KAAK,CAAC1B,MAAN,KAAiB,CAAjB,IAAsB0B,KAAK,CAACtB,KAAhC,EACE8C,WAAW,CAAC,IAAD,CAAX,CADF,KAGEX,YAAY,CAAC,IAAD,CAAZ;AACF,WAAO,IAAP;AACD;;AAEDO,EAAAA,CAAC,GAAGC,aAAa,CAACD,CAAD,EAAIpB,KAAJ,CAAjB;;AAGA,MAAIoB,CAAC,KAAK,CAAN,IAAWpB,KAAK,CAACtB,KAArB,EAA4B;AAC1B,QAAIsB,KAAK,CAAC1B,MAAN,KAAiB,CAArB,EACEkD,WAAW,CAAC,IAAD,CAAX;AACF,WAAO,IAAP;AACD;;AAyBD,MAAIC,MAAM,GAAGzB,KAAK,CAAClB,YAAnB;;AAGA,MAAIkB,KAAK,CAAC1B,MAAN,KAAiB,CAAjB,IAAsB0B,KAAK,CAAC1B,MAAN,GAAe8C,CAAf,GAAmBpB,KAAK,CAAC7B,aAAnD,EAAkE;AAChEsD,IAAAA,MAAM,GAAG,IAAT;AACD;;AAID,MAAIzB,KAAK,CAACtB,KAAN,IAAesB,KAAK,CAACpB,OAAzB,EAAkC;AAChC6C,IAAAA,MAAM,GAAG,KAAT;AACD,GAFD,MAEO,IAAIA,MAAJ,EAAY;AACjBzB,IAAAA,KAAK,CAACpB,OAAN,GAAgB,IAAhB;AACAoB,IAAAA,KAAK,CAACnB,IAAN,GAAa,IAAb;AAEA,QAAImB,KAAK,CAAC1B,MAAN,KAAiB,CAArB,EACE0B,KAAK,CAAClB,YAAN,GAAqB,IAArB;;AAEF,SAAKa,KAAL,CAAWK,KAAK,CAAC7B,aAAjB;;AACA6B,IAAAA,KAAK,CAACnB,IAAN,GAAa,KAAb;AAGA,QAAI,CAACmB,KAAK,CAACpB,OAAX,EACEwC,CAAC,GAAGC,aAAa,CAACE,KAAD,EAAQvB,KAAR,CAAjB;AACH;;AAED,MAAI0B,GAAJ;AACA,MAAIN,CAAC,GAAG,CAAR,EACEM,GAAG,GAAGC,QAAQ,CAACP,CAAD,EAAIpB,KAAJ,CAAd,CADF,KAGE0B,GAAG,GAAG,IAAN;;AAEF,MAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB1B,IAAAA,KAAK,CAAClB,YAAN,GAAqB,IAArB;AACAsC,IAAAA,CAAC,GAAG,CAAJ;AACD,GAHD,MAGO;AACLpB,IAAAA,KAAK,CAAC1B,MAAN,IAAgB8C,CAAhB;AACD;;AAED,MAAIpB,KAAK,CAAC1B,MAAN,KAAiB,CAArB,EAAwB;AAGtB,QAAI,CAAC0B,KAAK,CAACtB,KAAX,EACEsB,KAAK,CAAClB,YAAN,GAAqB,IAArB;AAGF,QAAIyC,KAAK,KAAKH,CAAV,IAAepB,KAAK,CAACtB,KAAzB,EACE8C,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,MAAIE,GAAG,KAAK,IAAZ,EACE,KAAKnB,IAAL,CAAU,MAAV,EAAkBmB,GAAlB;AAEF,SAAOA,GAAP;AACD,CA3GD;;AA6GA,SAASpB,YAAT,CAAsBN,KAAtB,EAA6BD,KAA7B,EAAoC;AAClC,MAAIM,EAAE,GAAG,IAAT;;AACA,MAAI,EAAEN,KAAK,YAAYhD,MAAnB,KACA,OAAOgD,KAAP,KAAiB,QADjB,IAEAA,KAAK,KAAK,IAFV,IAGAA,KAAK,KAAK6B,SAHV,IAIA,CAAC5B,KAAK,CAACjC,UAJX,EAIuB;AACrBsC,IAAAA,EAAE,GAAG,IAAIwB,SAAJ,CAAc,iCAAd,CAAL;AACD;;AACD,SAAOxB,EAAP;AACD;;AAGD,SAASG,UAAT,CAAoB1C,MAApB,EAA4BkC,KAA5B,EAAmC;AACjC,MAAIA,KAAK,CAACtB,KAAV,EAAiB;;AACjB,MAAIsB,KAAK,CAACV,OAAV,EAAmB;AACjB,QAAIS,KAAK,GAAGC,KAAK,CAACV,OAAN,CAAcwC,GAAd,EAAZ;;AACA,QAAI/B,KAAK,IAAIA,KAAK,CAACzB,MAAnB,EAA2B;AACzB0B,MAAAA,KAAK,CAAC3B,MAAN,CAAayB,IAAb,CAAkBC,KAAlB;AACAC,MAAAA,KAAK,CAAC1B,MAAN,IAAgB0B,KAAK,CAACjC,UAAN,GAAmB,CAAnB,GAAuBgC,KAAK,CAACzB,MAA7C;AACD;AACF;;AACD0B,EAAAA,KAAK,CAACtB,KAAN,GAAc,IAAd;AAGAmC,EAAAA,YAAY,CAAC/C,MAAD,CAAZ;AACD;;AAKD,SAAS+C,YAAT,CAAsB/C,MAAtB,EAA8B;AAC5B,MAAIkC,KAAK,GAAGlC,MAAM,CAAC0B,cAAnB;AACAQ,EAAAA,KAAK,CAAClB,YAAN,GAAqB,KAArB;;AACA,MAAI,CAACkB,KAAK,CAACjB,eAAX,EAA4B;AAC1BiB,IAAAA,KAAK,CAACjB,eAAN,GAAwB,IAAxB;AACA,QAAIiB,KAAK,CAACnB,IAAV,EACE5B,QAAQ,CAAC8E,aAAD,EAAgBjE,MAAhB,CAAR,CADF,KAGEiE,aAAa,CAACjE,MAAD,CAAb;AACH;AACF;;AAED,SAASiE,aAAT,CAAuBjE,MAAvB,EAA+B;AAC7BA,EAAAA,MAAM,CAACyC,IAAP,CAAY,UAAZ;AACAyB,EAAAA,IAAI,CAAClE,MAAD,CAAJ;AACD;;AASD,SAASgD,aAAT,CAAuBhD,MAAvB,EAA+BkC,KAA/B,EAAsC;AACpC,MAAI,CAACA,KAAK,CAACX,WAAX,EAAwB;AACtBW,IAAAA,KAAK,CAACX,WAAN,GAAoB,IAApB;AACApC,IAAAA,QAAQ,CAACgF,cAAD,EAAiBnE,MAAjB,EAAyBkC,KAAzB,CAAR;AACD;AACF;;AAED,SAASiC,cAAT,CAAwBnE,MAAxB,EAAgCkC,KAAhC,EAAuC;AACrC,MAAIkC,GAAG,GAAGlC,KAAK,CAAC1B,MAAhB;;AACA,SAAO,CAAC0B,KAAK,CAACpB,OAAP,IAAkB,CAACoB,KAAK,CAACvB,OAAzB,IAAoC,CAACuB,KAAK,CAACtB,KAA3C,IACAsB,KAAK,CAAC1B,MAAN,GAAe0B,KAAK,CAAC7B,aAD5B,EAC2C;AACzCL,IAAAA,MAAM,CAAC4B,IAAP,CAAY,CAAZ;AACA,QAAIwC,GAAG,KAAKlC,KAAK,CAAC1B,MAAlB,EAEE,MAFF,KAIE4D,GAAG,GAAGlC,KAAK,CAAC1B,MAAZ;AACH;;AACD0B,EAAAA,KAAK,CAACX,WAAN,GAAoB,KAApB;AACD;;AAMD5C,QAAQ,CAACoD,SAAT,CAAmBF,KAAnB,GAA2B,UAASyB,CAAT,EAAY;AACrC,OAAKb,IAAL,CAAU,OAAV,EAAmB,IAAIG,KAAJ,CAAU,4BAAV,CAAnB;AACD,CAFD;;AAIAjE,QAAQ,CAACoD,SAAT,CAAmBsC,IAAnB,GAA0B,UAASC,IAAT,EAAeC,QAAf,EAAyB;AACjD,MAAIC,GAAG,GAAG,IAAV;AACA,MAAItC,KAAK,GAAG,KAAKR,cAAjB;;AAEA,UAAQQ,KAAK,CAACxB,UAAd;AACE,SAAK,CAAL;AACEwB,MAAAA,KAAK,CAACzB,KAAN,GAAc6D,IAAd;AACA;;AACF,SAAK,CAAL;AACEpC,MAAAA,KAAK,CAACzB,KAAN,GAAc,CAACyB,KAAK,CAACzB,KAAP,EAAc6D,IAAd,CAAd;AACA;;AACF;AACEpC,MAAAA,KAAK,CAACzB,KAAN,CAAYuB,IAAZ,CAAiBsC,IAAjB;AACA;AATJ;;AAWApC,EAAAA,KAAK,CAACxB,UAAN,IAAoB,CAApB;AAEA,MAAI+D,KAAK,GAAI,CAACF,QAAD,IAAaA,QAAQ,CAACP,GAAT,KAAiB,KAA3C;AAEA,MAAIU,KAAK,GAAGD,KAAK,GAAGE,KAAH,GAAWC,OAA5B;AACA,MAAI1C,KAAK,CAACrB,UAAV,EACE1B,QAAQ,CAACuF,KAAD,CAAR,CADF,KAGEF,GAAG,CAACK,IAAJ,CAAS,KAAT,EAAgBH,KAAhB;AAEFJ,EAAAA,IAAI,CAAC3E,EAAL,CAAQ,QAAR,EAAkBmF,QAAlB;;AACA,WAASA,QAAT,CAAkBnD,QAAlB,EAA4B;AAC1B,QAAIA,QAAQ,KAAK6C,GAAjB,EAAsB;AACpBI,MAAAA,OAAO;AACR;AACF;;AAED,WAASD,KAAT,GAAiB;AACfL,IAAAA,IAAI,CAACN,GAAL;AACD;;AAMD,MAAIe,OAAO,GAAGC,WAAW,CAACR,GAAD,CAAzB;AACAF,EAAAA,IAAI,CAAC3E,EAAL,CAAQ,OAAR,EAAiBoF,OAAjB;AAEA,MAAIE,SAAS,GAAG,KAAhB;;AACA,WAASL,OAAT,GAAmB;AAEjBN,IAAAA,IAAI,CAACY,cAAL,CAAoB,OAApB,EAA6BC,OAA7B;AACAb,IAAAA,IAAI,CAACY,cAAL,CAAoB,QAApB,EAA8BE,QAA9B;AACAd,IAAAA,IAAI,CAACY,cAAL,CAAoB,OAApB,EAA6BH,OAA7B;AACAT,IAAAA,IAAI,CAACY,cAAL,CAAoB,OAApB,EAA6BG,OAA7B;AACAf,IAAAA,IAAI,CAACY,cAAL,CAAoB,QAApB,EAA8BJ,QAA9B;AACAN,IAAAA,GAAG,CAACU,cAAJ,CAAmB,KAAnB,EAA0BP,KAA1B;AACAH,IAAAA,GAAG,CAACU,cAAJ,CAAmB,KAAnB,EAA0BN,OAA1B;AACAJ,IAAAA,GAAG,CAACU,cAAJ,CAAmB,MAAnB,EAA2BI,MAA3B;AAEAL,IAAAA,SAAS,GAAG,IAAZ;AAOA,QAAI/C,KAAK,CAACZ,UAAN,KACC,CAACgD,IAAI,CAACiB,cAAN,IAAwBjB,IAAI,CAACiB,cAAL,CAAoBC,SAD7C,CAAJ,EAEET,OAAO;AACV;;AAMD,MAAIU,mBAAmB,GAAG,KAA1B;AACAjB,EAAAA,GAAG,CAAC7E,EAAJ,CAAO,MAAP,EAAe2F,MAAf;;AACA,WAASA,MAAT,CAAgBrD,KAAhB,EAAuB;AACrBwD,IAAAA,mBAAmB,GAAG,KAAtB;AACA,QAAI7B,GAAG,GAAGU,IAAI,CAACxB,KAAL,CAAWb,KAAX,CAAV;;AACA,QAAI,UAAU2B,GAAV,IAAiB,CAAC6B,mBAAtB,EAA2C;AAKzC,UAAI,CAAEvD,KAAK,CAACxB,UAAN,KAAqB,CAArB,IAA0BwB,KAAK,CAACzB,KAAN,KAAgB6D,IAA3C,IACCpC,KAAK,CAACxB,UAAN,GAAmB,CAAnB,IAAwBwB,KAAK,CAACzB,KAAN,CAAYiF,OAAZ,CAAoBpB,IAApB,MAA8B,CAAC,CADzD,KAEA,CAACW,SAFL,EAEgB;AACdT,QAAAA,GAAG,CAAC9C,cAAJ,CAAmBJ,UAAnB;AACAmE,QAAAA,mBAAmB,GAAG,IAAtB;AACD;;AACDjB,MAAAA,GAAG,CAACmB,KAAJ;AACD;AACF;;AAID,WAASN,OAAT,CAAiB9C,EAAjB,EAAqB;AACnBqD,IAAAA,MAAM;AACNtB,IAAAA,IAAI,CAACY,cAAL,CAAoB,OAApB,EAA6BG,OAA7B;AACA,QAAIxG,EAAE,CAACgH,aAAH,CAAiBvB,IAAjB,EAAuB,OAAvB,MAAoC,CAAxC,EACEA,IAAI,CAAC7B,IAAL,CAAU,OAAV,EAAmBF,EAAnB;AACH;;AAGDjD,EAAAA,eAAe,CAACgF,IAAD,EAAO,OAAP,EAAgBe,OAAhB,CAAf;;AAGA,WAASF,OAAT,GAAmB;AACjBb,IAAAA,IAAI,CAACY,cAAL,CAAoB,QAApB,EAA8BE,QAA9B;AACAQ,IAAAA,MAAM;AACP;;AACDtB,EAAAA,IAAI,CAACO,IAAL,CAAU,OAAV,EAAmBM,OAAnB;;AACA,WAASC,QAAT,GAAoB;AAClBd,IAAAA,IAAI,CAACY,cAAL,CAAoB,OAApB,EAA6BC,OAA7B;AACAS,IAAAA,MAAM;AACP;;AACDtB,EAAAA,IAAI,CAACO,IAAL,CAAU,QAAV,EAAoBO,QAApB;;AAEA,WAASQ,MAAT,GAAkB;AAChBpB,IAAAA,GAAG,CAACoB,MAAJ,CAAWtB,IAAX;AACD;;AAGDA,EAAAA,IAAI,CAAC7B,IAAL,CAAU,MAAV,EAAkB+B,GAAlB;;AAGA,MAAI,CAACtC,KAAK,CAACvB,OAAX,EAAoB;AAClB6D,IAAAA,GAAG,CAACsB,MAAJ;AACD;;AAED,SAAOxB,IAAP;AACD,CAhID;;AAkIA,SAASU,WAAT,CAAqBR,GAArB,EAA0B;AACxB,SAAO,YAAW;AAChB,QAAItC,KAAK,GAAGsC,GAAG,CAAC9C,cAAhB;AACA,QAAIQ,KAAK,CAACZ,UAAV,EACEY,KAAK,CAACZ,UAAN;;AACF,QAAIY,KAAK,CAACZ,UAAN,KAAqB,CAArB,IAA0BzC,EAAE,CAACgH,aAAH,CAAiBrB,GAAjB,EAAsB,MAAtB,CAA9B,EAA6D;AAC3DtC,MAAAA,KAAK,CAACvB,OAAN,GAAgB,IAAhB;AACAuD,MAAAA,IAAI,CAACM,GAAD,CAAJ;AACD;AACF,GARD;AASD;;AAGD7F,QAAQ,CAACoD,SAAT,CAAmB6D,MAAnB,GAA4B,UAAStB,IAAT,EAAe;AACzC,MAAIpC,KAAK,GAAG,KAAKR,cAAjB;AAGA,MAAIQ,KAAK,CAACxB,UAAN,KAAqB,CAAzB,EACE,OAAO,IAAP;;AAGF,MAAIwB,KAAK,CAACxB,UAAN,KAAqB,CAAzB,EAA4B;AAE1B,QAAI4D,IAAI,IAAIA,IAAI,KAAKpC,KAAK,CAACzB,KAA3B,EACE,OAAO,IAAP;AAEF,QAAI,CAAC6D,IAAL,EACEA,IAAI,GAAGpC,KAAK,CAACzB,KAAb;AAGFyB,IAAAA,KAAK,CAACzB,KAAN,GAAc,IAAd;AACAyB,IAAAA,KAAK,CAACxB,UAAN,GAAmB,CAAnB;AACAwB,IAAAA,KAAK,CAACvB,OAAN,GAAgB,KAAhB;AACA,QAAI2D,IAAJ,EACEA,IAAI,CAAC7B,IAAL,CAAU,QAAV,EAAoB,IAApB;AACF,WAAO,IAAP;AACD;;AAID,MAAI,CAAC6B,IAAL,EAAW;AAET,QAAIyB,KAAK,GAAG7D,KAAK,CAACzB,KAAlB;AACA,QAAI2D,GAAG,GAAGlC,KAAK,CAACxB,UAAhB;AACAwB,IAAAA,KAAK,CAACzB,KAAN,GAAc,IAAd;AACAyB,IAAAA,KAAK,CAACxB,UAAN,GAAmB,CAAnB;AACAwB,IAAAA,KAAK,CAACvB,OAAN,GAAgB,KAAhB;;AAEA,SAAK,IAAIqF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,GAApB,EAAyB4B,CAAC,EAA1B;AACED,MAAAA,KAAK,CAACC,CAAD,CAAL,CAASvD,IAAT,CAAc,QAAd,EAAwB,IAAxB;AADF;;AAEA,WAAO,IAAP;AACD;;AAGD,MAAMwD,KAAK,GAAG/D,KAAK,CAACzB,KAAN,CAAYiF,OAAZ,CAAoBpB,IAApB,CAAd;AACA,MAAI2B,KAAK,KAAK,CAAC,CAAf,EACE,OAAO,IAAP;AAEF/D,EAAAA,KAAK,CAACzB,KAAN,CAAYyF,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B;AACA/D,EAAAA,KAAK,CAACxB,UAAN,IAAoB,CAApB;AACA,MAAIwB,KAAK,CAACxB,UAAN,KAAqB,CAAzB,EACEwB,KAAK,CAACzB,KAAN,GAAcyB,KAAK,CAACzB,KAAN,CAAY,CAAZ,CAAd;AAEF6D,EAAAA,IAAI,CAAC7B,IAAL,CAAU,QAAV,EAAoB,IAApB;AAEA,SAAO,IAAP;AACD,CArDD;;AAyDA9D,QAAQ,CAACoD,SAAT,CAAmBpC,EAAnB,GAAwB,UAASwG,EAAT,EAAa1G,EAAb,EAAiB;AACvC,MAAM2G,GAAG,GAAGpH,MAAM,CAAC+C,SAAP,CAAiBpC,EAAjB,CAAoBmC,IAApB,CAAyB,IAAzB,EAA+BqE,EAA/B,EAAmC1G,EAAnC,CAAZ;;AAEA,MAAI0G,EAAE,KAAK,MAAX,EAAmB;AAEjB,QAAI,KAAKzE,cAAL,CAAoBf,OAApB,KAAgC,KAApC,EACE,KAAKmF,MAAL;AACH,GAJD,MAIO,IAAIK,EAAE,KAAK,UAAX,EAAuB;AAC5B,QAAMjE,KAAK,GAAG,KAAKR,cAAnB;;AACA,QAAI,CAACQ,KAAK,CAACrB,UAAP,IAAqB,CAACqB,KAAK,CAAChB,iBAAhC,EAAmD;AACjDgB,MAAAA,KAAK,CAAChB,iBAAN,GAA0BgB,KAAK,CAAClB,YAAN,GAAqB,IAA/C;AACAkB,MAAAA,KAAK,CAACjB,eAAN,GAAwB,KAAxB;;AACA,UAAI,CAACiB,KAAK,CAACpB,OAAX,EAAoB;AAClB3B,QAAAA,QAAQ,CAACkH,gBAAD,EAAmB,IAAnB,CAAR;AACD,OAFD,MAEO,IAAInE,KAAK,CAAC1B,MAAV,EAAkB;AACvBuC,QAAAA,YAAY,CAAC,IAAD,EAAOb,KAAP,CAAZ;AACD;AACF;AACF;;AAED,SAAOkE,GAAP;AACD,CArBD;;AAsBAzH,QAAQ,CAACoD,SAAT,CAAmBuE,WAAnB,GAAiC3H,QAAQ,CAACoD,SAAT,CAAmBpC,EAApD;;AAEA,SAAS0G,gBAAT,CAA0BE,IAA1B,EAAgC;AAC9BA,EAAAA,IAAI,CAAC3E,IAAL,CAAU,CAAV;AACD;;AAIDjD,QAAQ,CAACoD,SAAT,CAAmB+D,MAAnB,GAA4B,YAAW;AACrC,MAAI5D,KAAK,GAAG,KAAKR,cAAjB;;AACA,MAAI,CAACQ,KAAK,CAACvB,OAAX,EAAoB;AAClBuB,IAAAA,KAAK,CAACvB,OAAN,GAAgB,IAAhB;AACAmF,IAAAA,MAAM,CAAC,IAAD,EAAO5D,KAAP,CAAN;AACD;;AACD,SAAO,IAAP;AACD,CAPD;;AASA,SAAS4D,MAAT,CAAgB9F,MAAhB,EAAwBkC,KAAxB,EAA+B;AAC7B,MAAI,CAACA,KAAK,CAACf,eAAX,EAA4B;AAC1Be,IAAAA,KAAK,CAACf,eAAN,GAAwB,IAAxB;AACAhC,IAAAA,QAAQ,CAACqH,OAAD,EAAUxG,MAAV,EAAkBkC,KAAlB,CAAR;AACD;AACF;;AAED,SAASsE,OAAT,CAAiBxG,MAAjB,EAAyBkC,KAAzB,EAAgC;AAC9B,MAAI,CAACA,KAAK,CAACpB,OAAX,EAAoB;AAClBd,IAAAA,MAAM,CAAC4B,IAAP,CAAY,CAAZ;AACD;;AAEDM,EAAAA,KAAK,CAACf,eAAN,GAAwB,KAAxB;AACAe,EAAAA,KAAK,CAACZ,UAAN,GAAmB,CAAnB;AACAtB,EAAAA,MAAM,CAACyC,IAAP,CAAY,QAAZ;AACAyB,EAAAA,IAAI,CAAClE,MAAD,CAAJ;AACA,MAAIkC,KAAK,CAACvB,OAAN,IAAiB,CAACuB,KAAK,CAACpB,OAA5B,EACEd,MAAM,CAAC4B,IAAP,CAAY,CAAZ;AACH;;AAEDjD,QAAQ,CAACoD,SAAT,CAAmB4D,KAAnB,GAA2B,YAAW;AACpC,MAAI,UAAU,KAAKjE,cAAL,CAAoBf,OAAlC,EAA2C;AACzC,SAAKe,cAAL,CAAoBf,OAApB,GAA8B,KAA9B;AACA,SAAK8B,IAAL,CAAU,OAAV;AACD;;AACD,SAAO,IAAP;AACD,CAND;;AAQA,SAASyB,IAAT,CAAclE,MAAd,EAAsB;AACpB,MAAMkC,KAAK,GAAGlC,MAAM,CAAC0B,cAArB;;AACA,SAAOQ,KAAK,CAACvB,OAAN,IAAiBX,MAAM,CAAC4B,IAAP,OAAkB,IAA1C;AAA+C;AAA/C;AACD;;AAKDjD,QAAQ,CAACoD,SAAT,CAAmB0E,IAAnB,GAA0B,UAASzG,MAAT,EAAiB;AACzC,MAAIkC,KAAK,GAAG,KAAKR,cAAjB;AACA,MAAIgF,MAAM,GAAG,KAAb;AAEA,MAAIH,IAAI,GAAG,IAAX;AACAvG,EAAAA,MAAM,CAACL,EAAP,CAAU,KAAV,EAAiB,YAAW;AAC1B,QAAIuC,KAAK,CAACV,OAAN,IAAiB,CAACU,KAAK,CAACtB,KAA5B,EAAmC;AACjC,UAAIqB,KAAK,GAAGC,KAAK,CAACV,OAAN,CAAcwC,GAAd,EAAZ;AACA,UAAI/B,KAAK,IAAIA,KAAK,CAACzB,MAAnB,EACE+F,IAAI,CAACvE,IAAL,CAAUC,KAAV;AACH;;AAEDsE,IAAAA,IAAI,CAACvE,IAAL,CAAU,IAAV;AACD,GARD;AAUAhC,EAAAA,MAAM,CAACL,EAAP,CAAU,MAAV,EAAkB,UAASsC,KAAT,EAAgB;AAChC,QAAIC,KAAK,CAACV,OAAV,EACES,KAAK,GAAGC,KAAK,CAACV,OAAN,CAAcsB,KAAd,CAAoBb,KAApB,CAAR;AAGF,QAAIC,KAAK,CAACjC,UAAN,KAAqBgC,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK6B,SAAjD,CAAJ,EACE,OADF,KAEK,IAAI,CAAC5B,KAAK,CAACjC,UAAP,KAAsB,CAACgC,KAAD,IAAU,CAACA,KAAK,CAACzB,MAAvC,CAAJ,EACH;AAEF,QAAIoD,GAAG,GAAG2C,IAAI,CAACvE,IAAL,CAAUC,KAAV,CAAV;;AACA,QAAI,CAAC2B,GAAL,EAAU;AACR8C,MAAAA,MAAM,GAAG,IAAT;AACA1G,MAAAA,MAAM,CAAC2F,KAAP;AACD;AACF,GAfD;;AAmBA,OAAK,IAAIK,CAAT,IAAchG,MAAd,EAAsB;AACpB,QAAI,KAAKgG,CAAL,MAAYlC,SAAZ,IAAyB,OAAO9D,MAAM,CAACgG,CAAD,CAAb,KAAqB,UAAlD,EAA8D;AAC5D,WAAKA,CAAL,IAAU,UAASW,MAAT,EAAiB;AACzB,eAAO,YAAW;AAChB,iBAAO3G,MAAM,CAAC2G,MAAD,CAAN,CAAeC,KAAf,CAAqB5G,MAArB,EAA6B6G,SAA7B,CAAP;AACD,SAFD;AAGD,OAJS,CAIRb,CAJQ,CAAV;AAKD;AACF;;AAGD,MAAMc,MAAM,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,SAAnB,EAA8B,OAA9B,EAAuC,QAAvC,CAAf;AACAA,EAAAA,MAAM,CAACC,OAAP,CAAe,UAASZ,EAAT,EAAa;AAC1BnG,IAAAA,MAAM,CAACL,EAAP,CAAUwG,EAAV,EAAcI,IAAI,CAAC9D,IAAL,CAAUuE,IAAV,CAAeT,IAAf,EAAqBJ,EAArB,CAAd;AACD,GAFD;;AAMAI,EAAAA,IAAI,CAAC1E,KAAL,GAAa,UAASyB,CAAT,EAAY;AACvB,QAAIoD,MAAJ,EAAY;AACVA,MAAAA,MAAM,GAAG,KAAT;AACA1G,MAAAA,MAAM,CAAC8F,MAAP;AACD;AACF,GALD;;AAOA,SAAOS,IAAP;AACD,CA5DD;;AAgEA5H,QAAQ,CAACsI,SAAT,GAAqBpD,QAArB;;AAMA,SAASA,QAAT,CAAkBP,CAAlB,EAAqBpB,KAArB,EAA4B;AAE1B,MAAIA,KAAK,CAAC1B,MAAN,KAAiB,CAArB,EACE,OAAO,IAAP;AAEF,MAAIoD,GAAJ;AACA,MAAI1B,KAAK,CAACjC,UAAV,EACE2D,GAAG,GAAG1B,KAAK,CAAC3B,MAAN,CAAa2G,KAAb,EAAN,CADF,KAEK,IAAI,CAAC5D,CAAD,IAAMA,CAAC,IAAIpB,KAAK,CAAC1B,MAArB,EAA6B;AAEhC,QAAI0B,KAAK,CAACV,OAAV,EACEoC,GAAG,GAAG1B,KAAK,CAAC3B,MAAN,CAAa4G,IAAb,CAAkB,EAAlB,CAAN,CADF,KAEK,IAAIjF,KAAK,CAAC3B,MAAN,CAAaC,MAAb,KAAwB,CAA5B,EACHoD,GAAG,GAAG1B,KAAK,CAAC3B,MAAN,CAAa,CAAb,CAAN,CADG,KAGHqD,GAAG,GAAG1B,KAAK,CAAC3B,MAAN,CAAa6G,MAAb,CAAoBlF,KAAK,CAAC1B,MAA1B,CAAN;AACF0B,IAAAA,KAAK,CAAC3B,MAAN,CAAaC,MAAb,GAAsB,CAAtB;AACD,GATI,MASE;AAELoD,IAAAA,GAAG,GAAGyD,eAAe,CAAC/D,CAAD,EAAIpB,KAAK,CAAC3B,MAAV,EAAkB2B,KAAK,CAACV,OAAxB,CAArB;AACD;AAED,SAAOoC,GAAP;AACD;;AAKD,SAASyD,eAAT,CAAyB/D,CAAzB,EAA4BgE,IAA5B,EAAkCC,UAAlC,EAA8C;AAC5C,MAAI3D,GAAJ;;AACA,MAAIN,CAAC,GAAGgE,IAAI,CAACE,IAAL,CAAUC,IAAV,CAAejH,MAAvB,EAA+B;AAE7BoD,IAAAA,GAAG,GAAG0D,IAAI,CAACE,IAAL,CAAUC,IAAV,CAAeC,KAAf,CAAqB,CAArB,EAAwBpE,CAAxB,CAAN;AACAgE,IAAAA,IAAI,CAACE,IAAL,CAAUC,IAAV,GAAiBH,IAAI,CAACE,IAAL,CAAUC,IAAV,CAAeC,KAAf,CAAqBpE,CAArB,CAAjB;AACD,GAJD,MAIO,IAAIA,CAAC,KAAKgE,IAAI,CAACE,IAAL,CAAUC,IAAV,CAAejH,MAAzB,EAAiC;AAEtCoD,IAAAA,GAAG,GAAG0D,IAAI,CAACJ,KAAL,EAAN;AACD,GAHM,MAGA;AAELtD,IAAAA,GAAG,GAAI2D,UAAU,GACRI,oBAAoB,CAACrE,CAAD,EAAIgE,IAAJ,CADZ,GAERM,cAAc,CAACtE,CAAD,EAAIgE,IAAJ,CAFvB;AAGD;;AACD,SAAO1D,GAAP;AACD;;AAMD,SAAS+D,oBAAT,CAA8BrE,CAA9B,EAAiCgE,IAAjC,EAAuC;AACrC,MAAIO,CAAC,GAAGP,IAAI,CAACE,IAAb;AACA,MAAIM,CAAC,GAAG,CAAR;AACA,MAAIlE,GAAG,GAAGiE,CAAC,CAACJ,IAAZ;AACAnE,EAAAA,CAAC,IAAIM,GAAG,CAACpD,MAAT;;AACA,SAAOqH,CAAC,GAAGA,CAAC,CAACE,IAAb,EAAmB;AACjB,QAAMC,GAAG,GAAGH,CAAC,CAACJ,IAAd;AACA,QAAMQ,EAAE,GAAI3E,CAAC,GAAG0E,GAAG,CAACxH,MAAR,GAAiBwH,GAAG,CAACxH,MAArB,GAA8B8C,CAA1C;AACA,QAAI2E,EAAE,KAAKD,GAAG,CAACxH,MAAf,EACEoD,GAAG,IAAIoE,GAAP,CADF,KAGEpE,GAAG,IAAIoE,GAAG,CAACN,KAAJ,CAAU,CAAV,EAAapE,CAAb,CAAP;AACFA,IAAAA,CAAC,IAAI2E,EAAL;;AACA,QAAI3E,CAAC,KAAK,CAAV,EAAa;AACX,UAAI2E,EAAE,KAAKD,GAAG,CAACxH,MAAf,EAAuB;AACrB,UAAEsH,CAAF;AACA,YAAID,CAAC,CAACE,IAAN,EACET,IAAI,CAACE,IAAL,GAAYK,CAAC,CAACE,IAAd,CADF,KAGET,IAAI,CAACE,IAAL,GAAYF,IAAI,CAACY,IAAL,GAAY,IAAxB;AACH,OAND,MAMO;AACLZ,QAAAA,IAAI,CAACE,IAAL,GAAYK,CAAZ;AACAA,QAAAA,CAAC,CAACJ,IAAF,GAASO,GAAG,CAACN,KAAJ,CAAUO,EAAV,CAAT;AACD;;AACD;AACD;;AACD,MAAEH,CAAF;AACD;;AACDR,EAAAA,IAAI,CAAC9G,MAAL,IAAesH,CAAf;AACA,SAAOlE,GAAP;AACD;;AAKD,SAASgE,cAAT,CAAwBtE,CAAxB,EAA2BgE,IAA3B,EAAiC;AAC/B,MAAM1D,GAAG,GAAG3E,MAAM,CAACkJ,WAAP,CAAmB7E,CAAnB,CAAZ;AACA,MAAIuE,CAAC,GAAGP,IAAI,CAACE,IAAb;AACA,MAAIM,CAAC,GAAG,CAAR;AACAD,EAAAA,CAAC,CAACJ,IAAF,CAAOW,IAAP,CAAYxE,GAAZ;AACAN,EAAAA,CAAC,IAAIuE,CAAC,CAACJ,IAAF,CAAOjH,MAAZ;;AACA,SAAOqH,CAAC,GAAGA,CAAC,CAACE,IAAb,EAAmB;AACjB,QAAMM,GAAG,GAAGR,CAAC,CAACJ,IAAd;AACA,QAAMQ,EAAE,GAAI3E,CAAC,GAAG+E,GAAG,CAAC7H,MAAR,GAAiB6H,GAAG,CAAC7H,MAArB,GAA8B8C,CAA1C;AACA+E,IAAAA,GAAG,CAACD,IAAJ,CAASxE,GAAT,EAAcA,GAAG,CAACpD,MAAJ,GAAa8C,CAA3B,EAA8B,CAA9B,EAAiC2E,EAAjC;AACA3E,IAAAA,CAAC,IAAI2E,EAAL;;AACA,QAAI3E,CAAC,KAAK,CAAV,EAAa;AACX,UAAI2E,EAAE,KAAKI,GAAG,CAAC7H,MAAf,EAAuB;AACrB,UAAEsH,CAAF;AACA,YAAID,CAAC,CAACE,IAAN,EACET,IAAI,CAACE,IAAL,GAAYK,CAAC,CAACE,IAAd,CADF,KAGET,IAAI,CAACE,IAAL,GAAYF,IAAI,CAACY,IAAL,GAAY,IAAxB;AACH,OAND,MAMO;AACLZ,QAAAA,IAAI,CAACE,IAAL,GAAYK,CAAZ;AACAA,QAAAA,CAAC,CAACJ,IAAF,GAASY,GAAG,CAACX,KAAJ,CAAUO,EAAV,CAAT;AACD;;AACD;AACD;;AACD,MAAEH,CAAF;AACD;;AACDR,EAAAA,IAAI,CAAC9G,MAAL,IAAesH,CAAf;AACA,SAAOlE,GAAP;AACD;;AAED,SAASF,WAAT,CAAqB1D,MAArB,EAA6B;AAC3B,MAAIkC,KAAK,GAAGlC,MAAM,CAAC0B,cAAnB;AAIA,MAAIQ,KAAK,CAAC1B,MAAN,GAAe,CAAnB,EACE,MAAM,IAAIoC,KAAJ,CAAU,4CAAV,CAAN;;AAEF,MAAI,CAACV,KAAK,CAACrB,UAAX,EAAuB;AACrBqB,IAAAA,KAAK,CAACtB,KAAN,GAAc,IAAd;AACAzB,IAAAA,QAAQ,CAACmJ,aAAD,EAAgBpG,KAAhB,EAAuBlC,MAAvB,CAAR;AACD;AACF;;AAED,SAASsI,aAAT,CAAuBpG,KAAvB,EAA8BlC,MAA9B,EAAsC;AAEpC,MAAI,CAACkC,KAAK,CAACrB,UAAP,IAAqBqB,KAAK,CAAC1B,MAAN,KAAiB,CAA1C,EAA6C;AAC3C0B,IAAAA,KAAK,CAACrB,UAAN,GAAmB,IAAnB;AACAb,IAAAA,MAAM,CAAC2B,QAAP,GAAkB,KAAlB;AACA3B,IAAAA,MAAM,CAACyC,IAAP,CAAY,KAAZ;AACD;AACF","sourcesContent":["'use strict';\n\nexports.Readable = Readable;\nReadable.ReadableState = ReadableState;\n\nconst EE = require('./events').EventEmitter;\nconst Stream = require('./stream');\nconst Buffer = require('./buffer').Buffer;\nconst util = require('./util');\nconst nextTick = require('./nextTick').nextTick;\nvar StringDecoder;\n\n// This is totally hacky. TODO: fixme.\nif (typeof Stream.Stream === 'function') {\n  Stream = Stream.Stream;\n}\nutil.inherits(Readable, Stream);\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') {\n    return emitter.prependListener(event, fn);\n  } else {\n    // This is a hack to make sure that our error handler is attached before any\n    // userland ones.  NEVER DO THIS. This is here only because this code needs\n    // to continue to work with older versions of Node.js that do not include\n    // the prependListener() method. The goal is to eventually remove this hack.\n    if (!emitter._events || !emitter._events[event])\n      emitter.on(event, fn);\n    else if (Array.isArray(emitter._events[event]))\n      emitter._events[event].unshift(fn);\n    else\n      emitter._events[event] = [fn, emitter._events[event]];\n  }\n}\n\nfunction ReadableState(options, stream) {\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Stream.Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('./string_decoder').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function')\n    this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = Buffer.from(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function() {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      const e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      const e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = (!state.objectMode && chunk.length === 0);\n      }\n\n      if (!addToFront)\n        state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront)\n            state.buffer.unshift(chunk);\n          else\n            state.buffer.push(chunk);\n\n          if (state.needReadable)\n            emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('./string_decoder').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nconst MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || (state.length === 0 && state.ended))\n    return 0;\n  if (state.objectMode)\n    return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark)\n    state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length)\n    return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    if (state.length === 0 && state.ended)\n      endReadable(this);\n    else\n      emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0)\n      endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n  } else if (doRead) {\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading)\n      n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended)\n      state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended)\n      endReadable(this);\n  }\n\n  if (ret !== null)\n    this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!(chunk instanceof Buffer) &&\n      typeof chunk !== 'string' &&\n      chunk !== null &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    state.emittedReadable = true;\n    if (state.sync)\n      nextTick(emitReadable_, stream);\n    else\n      emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  stream.emit('readable');\n  flow(stream);\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false);\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain &&\n        (!dest._writableState || dest._writableState.needDrain))\n      ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if (((state.pipesCount === 1 && state.pipes === dest) ||\n           (state.pipesCount > 1 && state.pipes.indexOf(dest) !== -1)) &&\n          !cleanedUp) {\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var state = src._readableState;\n    if (state.awaitDrain)\n      state.awaitDrain--;\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  const index = state.pipes.indexOf(dest);\n  if (index === -1)\n    return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  const res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false)\n      this.resume();\n  } else if (ev === 'readable') {\n    const state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  var state = this._readableState;\n  if (!state.flowing) {\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading)\n    stream.read(0);\n}\n\nReadable.prototype.pause = function() {\n  if (false !== this._readableState.flowing) {\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  const state = stream._readableState;\n  while (state.flowing && stream.read() !== null);\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined))\n      return;\n    else if (!state.objectMode && (!chunk || !chunk.length))\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function(method) {\n        return function() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  const events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  events.forEach(function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0)\n    return null;\n\n  var ret;\n  if (state.objectMode)\n    ret = state.buffer.shift();\n  else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder)\n      ret = state.buffer.join('');\n    else if (state.buffer.length === 1)\n      ret = state.buffer[0];\n    else\n      ret = state.buffer.concat(state.length);\n    state.buffer.length = 0;\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = (hasStrings\n           ? copyFromBufferString(n, list)\n           : copyFromBuffer(n, list));\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    const str = p.data;\n    const nb = (n > str.length ? str.length : n);\n    if (nb === str.length)\n      ret += str;\n    else\n      ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next)\n          list.head = p.next;\n        else\n          list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  const ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    const buf = p.data;\n    const nb = (n > buf.length ? buf.length : n);\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next)\n          list.head = p.next;\n        else\n          list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}