{"ast":null,"code":"'use strict';\n\nvar Parser = require(\"./parser\"),\n    Serializer = require(\"./serializer\");\n\nexports.parse = function parse(html, options) {\n  var parser = new Parser(options);\n  return parser.parse(html);\n};\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n\n  var parser = new Parser(options);\n  return parser.parseFragment(html, fragmentContext);\n};\n\nexports.serialize = function (node, options) {\n  var serializer = new Serializer(node, options);\n  return serializer.serialize();\n};\n\nexports.treeAdapters = {\n  default: require(\"./tree_adapters/default\"),\n  htmlparser2: require(\"./tree_adapters/htmlparser2\")\n};\nexports.ParserStream = require(\"./parser/parser_stream\");\nexports.PlainTextConversionStream = require(\"./parser/plain_text_conversion_stream\");\nexports.SerializerStream = require(\"./serializer/serializer_stream\");\nexports.SAXParser = require(\"./sax\");","map":{"version":3,"sources":["/Users/adarsh/Documents/StocksUI/node_modules/react-native-parse-html/lib/index.js"],"names":["Parser","require","Serializer","exports","parse","html","options","parser","parseFragment","fragmentContext","serialize","node","serializer","treeAdapters","default","htmlparser2","ParserStream","PlainTextConversionStream","SerializerStream","SAXParser"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,YAApB;AAAA,IACIC,UAAU,GAAGD,OAAO,gBADxB;;AAkBAE,OAAO,CAACC,KAAR,GAAgB,SAASA,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC1C,MAAIC,MAAM,GAAG,IAAIP,MAAJ,CAAWM,OAAX,CAAb;AAEA,SAAOC,MAAM,CAACH,KAAP,CAAaC,IAAb,CAAP;AACH,CAJD;;AAwBAF,OAAO,CAACK,aAAR,GAAwB,SAASA,aAAT,CAAuBC,eAAvB,EAAwCJ,IAAxC,EAA8CC,OAA9C,EAAuD;AAC3E,MAAI,OAAOG,eAAP,KAA2B,QAA/B,EAAyC;AACrCH,IAAAA,OAAO,GAAGD,IAAV;AACAA,IAAAA,IAAI,GAAGI,eAAP;AACAA,IAAAA,eAAe,GAAG,IAAlB;AACH;;AAED,MAAIF,MAAM,GAAG,IAAIP,MAAJ,CAAWM,OAAX,CAAb;AAEA,SAAOC,MAAM,CAACC,aAAP,CAAqBH,IAArB,EAA2BI,eAA3B,CAAP;AACH,CAVD;;AA+BAN,OAAO,CAACO,SAAR,GAAoB,UAAUC,IAAV,EAAgBL,OAAhB,EAAyB;AACzC,MAAIM,UAAU,GAAG,IAAIV,UAAJ,CAAeS,IAAf,EAAqBL,OAArB,CAAjB;AAEA,SAAOM,UAAU,CAACF,SAAX,EAAP;AACH,CAJD;;AAuBAP,OAAO,CAACU,YAAR,GAAuB;AACnBC,EAAAA,OAAO,EAAEb,OAAO,2BADG;AAEnBc,EAAAA,WAAW,EAAEd,OAAO;AAFD,CAAvB;AAOAE,OAAO,CAACa,YAAR,GAAuBf,OAAO,0BAA9B;AACAE,OAAO,CAACc,yBAAR,GAAoChB,OAAO,yCAA3C;AACAE,OAAO,CAACe,gBAAR,GAA2BjB,OAAO,kCAAlC;AACAE,OAAO,CAACgB,SAAR,GAAoBlB,OAAO,SAA3B","sourcesContent":["'use strict';\n\nvar Parser = require('./parser'),\n    Serializer = require('./serializer');\n\n/** @namespace parse5 */\n\n/**\n * Parses an HTML string.\n * @function parse\n * @memberof parse5\n * @instance\n * @param {string} html - Input HTML string.\n * @param {ParserOptions} [options] - Parsing options.\n * @returns {ASTNode<Document>} document\n * @example\n * var parse5 = require('parse5');\n *\n * var document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n */\nexports.parse = function parse(html, options) {\n    var parser = new Parser(options);\n\n    return parser.parse(html);\n};\n\n/**\n * Parses an HTML fragment.\n * @function parseFragment\n * @memberof parse5\n * @instance\n * @param {ASTNode} [fragmentContext] - Parsing context element. If specified, given fragment\n * will be parsed as if it was set to the context element's `innerHTML` property.\n * @param {string} html - Input HTML fragment string.\n * @param {ParserOptions} [options] - Parsing options.\n * @returns {ASTNode<DocumentFragment>} documentFragment\n * @example\n * var parse5 = require('parse5');\n *\n * var documentFragment = parse5.parseFragment('<table></table>');\n *\n * // Parses the html fragment in the context of the parsed <table> element.\n * var trFragment = parser.parseFragment(documentFragment.childNodes[0], '<tr><td>Shake it, baby</td></tr>');\n */\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n    if (typeof fragmentContext === 'string') {\n        options = html;\n        html = fragmentContext;\n        fragmentContext = null;\n    }\n\n    var parser = new Parser(options);\n\n    return parser.parseFragment(html, fragmentContext);\n};\n\n/**\n * Serializes an AST node to an HTML string.\n * @function serialize\n * @memberof parse5\n * @instance\n * @param {ASTNode} node - Node to serialize.\n * @param {SerializerOptions} [options] - Serialization options.\n * @returns {String} html\n * @example\n * var parse5 = require('parse5');\n *\n * var document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * var html = parse5.serialize(document);\n *\n * // Serializes the <body> element content.\n * var bodyInnerHtml = parse5.serialize(document.childNodes[0].childNodes[1]);\n */\nexports.serialize = function (node, options) {\n    var serializer = new Serializer(node, options);\n\n    return serializer.serialize();\n};\n\n/**\n * Provides built-in tree adapters that can be used for parsing and serialization.\n * @var treeAdapters\n * @memberof parse5\n * @instance\n * @property {TreeAdapter} default - Default tree format for parse5.\n * @property {TreeAdapter} htmlparser2 - Quite popular [htmlparser2](https://github.com/fb55/htmlparser2) tree format\n * (e.g. used by [cheerio](https://github.com/MatthewMueller/cheerio) and [jsdom](https://github.com/tmpvar/jsdom)).\n * @example\n * var parse5 = require('parse5');\n *\n * // Uses the default tree adapter for parsing.\n * var document = parse5.parse('<div></div>', { treeAdapter: parse5.treeAdapters.default });\n *\n * // Uses the htmlparser2 tree adapter with the SerializerStream.\n * var serializer = new parse5.SerializerStream(node, { treeAdapter: parse5.treeAdapters.htmlparser2 });\n */\nexports.treeAdapters = {\n    default: require('./tree_adapters/default'),\n    htmlparser2: require('./tree_adapters/htmlparser2')\n};\n\n\n// Streaming\nexports.ParserStream = require('./parser/parser_stream');\nexports.PlainTextConversionStream = require('./parser/plain_text_conversion_stream');\nexports.SerializerStream = require('./serializer/serializer_stream');\nexports.SAXParser = require('./sax');\n"]},"metadata":{},"sourceType":"script"}