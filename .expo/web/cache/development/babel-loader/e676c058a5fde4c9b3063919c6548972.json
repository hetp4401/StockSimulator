{"ast":null,"code":"var htmlparser = require('htmlparser2-without-node-native'),\n    parse5 = require('react-native-parse-html'),\n    Buffer = require('buffer/').Buffer;\n\nexports = module.exports = function (content, options, isDocument) {\n  var dom = exports.evaluate(content, options, isDocument),\n      root = exports.evaluate('<root></root>', options, false)[0];\n  root.type = 'root';\n  root.parent = null;\n  exports.update(dom, root);\n  return root;\n};\n\nfunction parseWithParse5(content, isDocument) {\n  var parse = isDocument ? parse5.parse : parse5.parseFragment,\n      root = parse(content, {\n    treeAdapter: parse5.treeAdapters.htmlparser2\n  });\n  return root.children;\n}\n\nexports.evaluate = function (content, options, isDocument) {\n  var dom;\n  if (Buffer.isBuffer(content)) content = content.toString();\n\n  if (typeof content === 'string') {\n    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;\n    dom = useHtmlParser2 ? htmlparser.parseDOM(content, options) : parseWithParse5(content, isDocument);\n  } else {\n    dom = content;\n  }\n\n  return dom;\n};\n\nexports.update = function (arr, parent) {\n  if (!Array.isArray(arr)) arr = [arr];\n\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n    var oldParent = node.parent || node.root,\n        oldSiblings = oldParent && oldParent.children;\n\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n\n  return parent;\n};","map":{"version":3,"sources":["/Users/adarsh/Documents/StocksUI/node_modules/react-native-cheerio/lib/parse.js"],"names":["htmlparser","require","parse5","Buffer","exports","module","content","options","isDocument","dom","evaluate","root","type","parent","update","parseWithParse5","parse","parseFragment","treeAdapter","treeAdapters","htmlparser2","children","isBuffer","toString","useHtmlParser2","xmlMode","_useHtmlParser2","parseDOM","arr","Array","isArray","i","length","node","oldParent","oldSiblings","splice","indexOf","prev","next"],"mappings":"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","sourcesContent":["/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2-without-node-native'),\n    parse5 = require('react-native-parse-html'),\n    Buffer = require('buffer/').Buffer;\n\n/*\n  Parser\n*/\nexports = module.exports = function(content, options, isDocument) {\n  var dom = exports.evaluate(content, options, isDocument),\n      // Generic root element\n      root = exports.evaluate('<root></root>', options, false)[0];\n\n  root.type = 'root';\n  root.parent = null;\n\n  // Update the dom using the root\n  exports.update(dom, root);\n\n  return root;\n};\n\nfunction parseWithParse5 (content, isDocument) {\n  var parse = isDocument ? parse5.parse : parse5.parseFragment,\n      root = parse(content, { treeAdapter: parse5.treeAdapters.htmlparser2 });\n\n  return root.children;\n}\n\nexports.evaluate = function(content, options, isDocument) {\n  // options = options || $.fn.options;\n\n  var dom;\n\n  if (Buffer.isBuffer(content))\n    content = content.toString();\n\n  if (typeof content === 'string') {\n    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;\n\n    dom = useHtmlParser2 ? htmlparser.parseDOM(content, options) : parseWithParse5(content, isDocument);\n  } else {\n    dom = content;\n  }\n\n  return dom;\n};\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function(arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    var oldParent = node.parent || node.root,\n        oldSiblings = oldParent && oldParent.children;\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n\n  return parent;\n};\n\n// module.exports = $.extend(exports);\n"]},"metadata":{},"sourceType":"script"}