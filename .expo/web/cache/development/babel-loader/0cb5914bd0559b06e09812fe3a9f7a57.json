{"ast":null,"code":"'use strict';\n\nexports.Duplex = Duplex;\n\nvar util = require(\"./util\");\n\nvar Readable = require(\"./_stream_readable\").Readable;\n\nvar Writable = require(\"./_stream_writable\").Writable;\n\nvar nextTick = require(\"./nextTick\").nextTick;\n\nutil.inherits(Duplex, Readable);\nvar keys = Object.keys(Writable.prototype);\n\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  if (options && options.readable === false) this.readable = false;\n  if (options && options.writable === false) this.writable = false;\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n  this.once('end', onend);\n}\n\nfunction onend() {\n  if (this.allowHalfOpen || this._writableState.ended) return;\n  nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}","map":{"version":3,"sources":["/Users/adarsh/Documents/StocksUI/node_modules/react-native-stream/src/_stream_duplex.js"],"names":["exports","Duplex","util","require","Readable","Writable","nextTick","inherits","keys","Object","prototype","v","length","method","options","call","readable","writable","allowHalfOpen","once","onend","_writableState","ended","onEndNT","self","end"],"mappings":"AAKA;;AAEAA,OAAO,CAACC,MAAR,GAAiBA,MAAjB;;AAEA,IAAMC,IAAI,GAAGC,OAAO,UAApB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,sBAAP,CAA8BC,QAA/C;;AACA,IAAMC,QAAQ,GAAGF,OAAO,sBAAP,CAA8BE,QAA/C;;AACA,IAAMC,QAAQ,GAAGH,OAAO,cAAP,CAAsBG,QAAvC;;AAEAJ,IAAI,CAACK,QAAL,CAAcN,MAAd,EAAsBG,QAAtB;AAEA,IAAII,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,QAAQ,CAACK,SAArB,CAAX;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,MAAIE,MAAM,GAAGL,IAAI,CAACG,CAAD,CAAjB;AACA,MAAI,CAACV,MAAM,CAACS,SAAP,CAAiBG,MAAjB,CAAL,EACEZ,MAAM,CAACS,SAAP,CAAiBG,MAAjB,IAA2BR,QAAQ,CAACK,SAAT,CAAmBG,MAAnB,CAA3B;AACH;;AAED,SAASZ,MAAT,CAAgBa,OAAhB,EAAyB;AACvB,MAAI,EAAE,gBAAgBb,MAAlB,CAAJ,EACE,OAAO,IAAIA,MAAJ,CAAWa,OAAX,CAAP;AAEFV,EAAAA,QAAQ,CAACW,IAAT,CAAc,IAAd,EAAoBD,OAApB;AACAT,EAAAA,QAAQ,CAACU,IAAT,CAAc,IAAd,EAAoBD,OAApB;AAEA,MAAIA,OAAO,IAAIA,OAAO,CAACE,QAAR,KAAqB,KAApC,EACE,KAAKA,QAAL,GAAgB,KAAhB;AAEF,MAAIF,OAAO,IAAIA,OAAO,CAACG,QAAR,KAAqB,KAApC,EACE,KAAKA,QAAL,GAAgB,KAAhB;AAEF,OAAKC,aAAL,GAAqB,IAArB;AACA,MAAIJ,OAAO,IAAIA,OAAO,CAACI,aAAR,KAA0B,KAAzC,EACE,KAAKA,aAAL,GAAqB,KAArB;AAEF,OAAKC,IAAL,CAAU,KAAV,EAAiBC,KAAjB;AACD;;AAGD,SAASA,KAAT,GAAiB;AAGf,MAAI,KAAKF,aAAL,IAAsB,KAAKG,cAAL,CAAoBC,KAA9C,EACE;AAIFhB,EAAAA,QAAQ,CAACiB,OAAD,EAAU,IAAV,CAAR;AACD;;AAED,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrBA,EAAAA,IAAI,CAACC,GAAL;AACD","sourcesContent":["// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\nexports.Duplex = Duplex;\n\nconst util = require('./util');\nconst Readable = require('./_stream_readable').Readable;\nconst Writable = require('./_stream_writable').Writable;\nconst nextTick = require('./nextTick').nextTick;\n\nutil.inherits(Duplex, Readable);\n\nvar keys = Object.keys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended)\n    return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n"]},"metadata":{},"sourceType":"script"}